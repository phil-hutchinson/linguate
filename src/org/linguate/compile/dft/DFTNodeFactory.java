/*
 * This code has not bee released under any license.
 * In future, it will be released under an open-source license.
 */
package org.linguate.compile.dft;

import org.linguate.compile.grammar.GrammarProduction;
import java.util.List;
import org.linguate.compile.lexeme.Lexeme;

/**
 * The DFTNodeFactory is responsible for provisioning of each {@link
 * org.linguate.compile.dft.DFTNode DFTNode} during a depth first traversal
 * (typically a bottom-up parse) based on a context free grammar.
 * 
 * <p>DFTNodeFactory consumers are required to call the methods in the appropriate
 * order for a depth-first, left-to-right traversal of a tree. So for the typical tree
 * that would be generated from 3 * 6 + 4 * 2 (with regular order of operations), the
 * order of method calls should be createLeafNode(3), createLeafNode(6), 
 * createInnerNode(3 * 6), createLeafNode(4), createLeafNode(2), createInnerNode(4 * 2),
 * createInnerNode(3 * 6 + 4 * 2). A typical consumer of this interface would be a 
 * bottom-up parser.
 * 
 * <p>DFTNodeFactory producers are required to return DFTNodes appropriate to the grammar
 * elements passed as method arguments, as is further specified in documentation for the
 * individual methods. A typical producer of this interface would be the tool that follows
 * the parser in the chain (e.g. a syntax analyzer.)
 * 
 * @author Phil Hutchinson
 */
public interface DFTNodeFactory
{

    /**
     * Generates a DFTNode based on a grammar production. 
     * 
     * <p>It is required that the element type of the DFTNode generated by this method
     * be the same as the element type of the head of the grammar production.
     * 
     * <p>A bottom-up parser should call this method during a reduce operation.
     * 
     * @param production A grammar production that is being used to build the current DFT sub-tree.
     * Cannot be null, and must be part of the grammar the DFTNodeFactory is designed for.
     * @param children A list of grammar elements that this production is using. Number of children
     * must be equal to length of body of production rule.
     * @return A DFTNode consistent with the grammar production.
     */
    DFTNode generateNodeForProduction(GrammarProduction production, List<DFTNode> children);

    /**
     * Generates a DFTNode based on a single lexeme.
     * 
     * <p>The element type of the resultant DFTNode should be appropriate for the type of lexeme,
     * as per the grammar the DFTNodeFactory is designed for.
     * @param element A lexeme with a grammar terminal that is part of the grammar that the
     * DFTNodeFactory handles.
     * @return A DFTNode consistent with the lexeme.
     */
    DFTNode generateNodeForLexeme(Lexeme element);
}
